/* Auto-generated by reg_to_code.py from drv8311.yaml */

#include "drv8311_registers.h"
#include <type_traits>
#include <Arduino.h>

using namespace drv8311_registers;

uint16_t dev_sts1_register_t::encode() const {
    return 0 + ((this->otp_flt & 1) << 8)
 + ((this->reset & 1) << 7)
 + ((this->spi_flt & 1) << 6)
 + ((this->ocp & 1) << 5)
 + ((this->uvp & 1) << 2)
 + ((this->ot & 1) << 1)
 + ((this->fault & 1) << 0)
;
}

dev_sts1_register_t dev_sts1_register_t::decode(uint16_t data) {
    dev_sts1_register_t reg = {
        .otp_flt = static_cast<uint8_t>((data >> 8) & 1),
        .reset = static_cast<uint8_t>((data >> 7) & 1),
        .spi_flt = static_cast<uint8_t>((data >> 6) & 1),
        .ocp = static_cast<uint8_t>((data >> 5) & 1),
        .uvp = static_cast<uint8_t>((data >> 2) & 1),
        .ot = static_cast<uint8_t>((data >> 1) & 1),
        .fault = static_cast<uint8_t>((data >> 0) & 1),

    };
    return reg;
}

bool dev_sts1_register_t::operator==(const dev_sts1_register_t& other) const {
    return true
        && (this->otp_flt == other.otp_flt)
        && (this->reset == other.reset)
        && (this->spi_flt == other.spi_flt)
        && (this->ocp == other.ocp)
        && (this->uvp == other.uvp)
        && (this->ot == other.ot)
        && (this->fault == other.fault)
    ;
}

void dev_sts1_register_t::print() const {
    Serial.print("dev_sts1:");

    Serial.print(" otp_flt=");
    Serial.print(this->otp_flt);
    Serial.print(" reset=");
    Serial.print(this->reset);
    Serial.print(" spi_flt=");
    Serial.print(this->spi_flt);
    Serial.print(" ocp=");
    Serial.print(this->ocp);
    Serial.print(" uvp=");
    Serial.print(this->uvp);
    Serial.print(" ot=");
    Serial.print(this->ot);
    Serial.print(" fault=");
    Serial.print(this->fault);

    Serial.println("");
}
uint16_t ot_sts_register_t::encode() const {
    return 0 + ((this->ots_avdd & 1) << 2)
 + ((this->otw & 1) << 1)
 + ((this->otsd & 1) << 0)
;
}

ot_sts_register_t ot_sts_register_t::decode(uint16_t data) {
    ot_sts_register_t reg = {
        .ots_avdd = static_cast<uint8_t>((data >> 2) & 1),
        .otw = static_cast<uint8_t>((data >> 1) & 1),
        .otsd = static_cast<uint8_t>((data >> 0) & 1),

    };
    return reg;
}

bool ot_sts_register_t::operator==(const ot_sts_register_t& other) const {
    return true
        && (this->ots_avdd == other.ots_avdd)
        && (this->otw == other.otw)
        && (this->otsd == other.otsd)
    ;
}

void ot_sts_register_t::print() const {
    Serial.print("ot_sts:");

    Serial.print(" ots_avdd=");
    Serial.print(this->ots_avdd);
    Serial.print(" otw=");
    Serial.print(this->otw);
    Serial.print(" otsd=");
    Serial.print(this->otsd);

    Serial.println("");
}
uint16_t sup_sts_register_t::encode() const {
    return 0 + ((this->csaref_uv & 1) << 5)
 + ((this->cp_uv & 1) << 6)
 + ((this->avdd_uv & 1) << 2)
 + ((this->vinavdd_uv & 1) << 0)
;
}

sup_sts_register_t sup_sts_register_t::decode(uint16_t data) {
    sup_sts_register_t reg = {
        .csaref_uv = static_cast<uint8_t>((data >> 5) & 1),
        .cp_uv = static_cast<uint8_t>((data >> 6) & 1),
        .avdd_uv = static_cast<uint8_t>((data >> 2) & 1),
        .vinavdd_uv = static_cast<uint8_t>((data >> 0) & 1),

    };
    return reg;
}

bool sup_sts_register_t::operator==(const sup_sts_register_t& other) const {
    return true
        && (this->csaref_uv == other.csaref_uv)
        && (this->cp_uv == other.cp_uv)
        && (this->avdd_uv == other.avdd_uv)
        && (this->vinavdd_uv == other.vinavdd_uv)
    ;
}

void sup_sts_register_t::print() const {
    Serial.print("sup_sts:");

    Serial.print(" csaref_uv=");
    Serial.print(this->csaref_uv);
    Serial.print(" cp_uv=");
    Serial.print(this->cp_uv);
    Serial.print(" avdd_uv=");
    Serial.print(this->avdd_uv);
    Serial.print(" vinavdd_uv=");
    Serial.print(this->vinavdd_uv);

    Serial.println("");
}
uint16_t drv_sts_register_t::encode() const {
    return 0 + ((this->ocpc_hs & 1) << 6)
 + ((this->ocpb_hs & 1) << 5)
 + ((this->ocpa_hs & 1) << 4)
 + ((this->ocpc_ls & 1) << 2)
 + ((this->ocpb_ls & 1) << 1)
 + ((this->ocpa_ls & 1) << 0)
;
}

drv_sts_register_t drv_sts_register_t::decode(uint16_t data) {
    drv_sts_register_t reg = {
        .ocpc_hs = static_cast<uint8_t>((data >> 6) & 1),
        .ocpb_hs = static_cast<uint8_t>((data >> 5) & 1),
        .ocpa_hs = static_cast<uint8_t>((data >> 4) & 1),
        .ocpc_ls = static_cast<uint8_t>((data >> 2) & 1),
        .ocpb_ls = static_cast<uint8_t>((data >> 1) & 1),
        .ocpa_ls = static_cast<uint8_t>((data >> 0) & 1),

    };
    return reg;
}

bool drv_sts_register_t::operator==(const drv_sts_register_t& other) const {
    return true
        && (this->ocpc_hs == other.ocpc_hs)
        && (this->ocpb_hs == other.ocpb_hs)
        && (this->ocpa_hs == other.ocpa_hs)
        && (this->ocpc_ls == other.ocpc_ls)
        && (this->ocpb_ls == other.ocpb_ls)
        && (this->ocpa_ls == other.ocpa_ls)
    ;
}

void drv_sts_register_t::print() const {
    Serial.print("drv_sts:");

    Serial.print(" ocpc_hs=");
    Serial.print(this->ocpc_hs);
    Serial.print(" ocpb_hs=");
    Serial.print(this->ocpb_hs);
    Serial.print(" ocpa_hs=");
    Serial.print(this->ocpa_hs);
    Serial.print(" ocpc_ls=");
    Serial.print(this->ocpc_ls);
    Serial.print(" ocpb_ls=");
    Serial.print(this->ocpb_ls);
    Serial.print(" ocpa_ls=");
    Serial.print(this->ocpa_ls);

    Serial.println("");
}
uint16_t sys_sts_register_t::encode() const {
    return 0 + ((this->otpld_err & 1) << 4)
 + ((this->spi_parity & 1) << 2)
 + ((this->bus_cnt & 1) << 1)
 + ((this->frm_err & 1) << 0)
;
}

sys_sts_register_t sys_sts_register_t::decode(uint16_t data) {
    sys_sts_register_t reg = {
        .otpld_err = static_cast<uint8_t>((data >> 4) & 1),
        .spi_parity = static_cast<uint8_t>((data >> 2) & 1),
        .bus_cnt = static_cast<uint8_t>((data >> 1) & 1),
        .frm_err = static_cast<uint8_t>((data >> 0) & 1),

    };
    return reg;
}

bool sys_sts_register_t::operator==(const sys_sts_register_t& other) const {
    return true
        && (this->otpld_err == other.otpld_err)
        && (this->spi_parity == other.spi_parity)
        && (this->bus_cnt == other.bus_cnt)
        && (this->frm_err == other.frm_err)
    ;
}

void sys_sts_register_t::print() const {
    Serial.print("sys_sts:");

    Serial.print(" otpld_err=");
    Serial.print(this->otpld_err);
    Serial.print(" spi_parity=");
    Serial.print(this->spi_parity);
    Serial.print(" bus_cnt=");
    Serial.print(this->bus_cnt);
    Serial.print(" frm_err=");
    Serial.print(this->frm_err);

    Serial.println("");
}
uint16_t pwm_sync_prd_register_t::encode() const {
    return 0 + ((this->pwm_sync_prd & 4095) << 0)
;
}

pwm_sync_prd_register_t pwm_sync_prd_register_t::decode(uint16_t data) {
    pwm_sync_prd_register_t reg = {
        .pwm_sync_prd = static_cast<uint16_t>((data >> 0) & 4095),

    };
    return reg;
}

bool pwm_sync_prd_register_t::operator==(const pwm_sync_prd_register_t& other) const {
    return true
        && (this->pwm_sync_prd == other.pwm_sync_prd)
    ;
}

void pwm_sync_prd_register_t::print() const {
    Serial.print("pwm_sync_prd:");

    Serial.print(" pwm_sync_prd=");
    Serial.print(this->pwm_sync_prd);

    Serial.println("");
}
uint16_t flt_mode_register_t::encode() const {
    return 0 + ((this->otpflt_mode & 1) << 8)
 + ((this->spflt_mode & 1) << 7)
 + ((this->ocp_mode & 7) << 4)
 + ((this->uvp_mode & 3) << 2)
 + ((this->otsd_mode & 3) << 0)
;
}

flt_mode_register_t flt_mode_register_t::decode(uint16_t data) {
    flt_mode_register_t reg = {
        .otpflt_mode = static_cast<uint8_t>((data >> 8) & 1),
        .spflt_mode = static_cast<uint8_t>((data >> 7) & 1),
        .ocp_mode = static_cast<uint8_t>((data >> 4) & 7),
        .uvp_mode = static_cast<uint8_t>((data >> 2) & 3),
        .otsd_mode = static_cast<uint8_t>((data >> 0) & 3),

    };
    return reg;
}

bool flt_mode_register_t::operator==(const flt_mode_register_t& other) const {
    return true
        && (this->otpflt_mode == other.otpflt_mode)
        && (this->spflt_mode == other.spflt_mode)
        && (this->ocp_mode == other.ocp_mode)
        && (this->uvp_mode == other.uvp_mode)
        && (this->otsd_mode == other.otsd_mode)
    ;
}

void flt_mode_register_t::print() const {
    Serial.print("flt_mode:");

    Serial.print(" otpflt_mode=");
    Serial.print(this->otpflt_mode);
    Serial.print(" spflt_mode=");
    Serial.print(this->spflt_mode);
    Serial.print(" ocp_mode=");
    Serial.print(this->ocp_mode);
    Serial.print(" uvp_mode=");
    Serial.print(this->uvp_mode);
    Serial.print(" otsd_mode=");
    Serial.print(this->otsd_mode);

    Serial.println("");
}
uint16_t sysf_ctrl_register_t::encode() const {
    return 0 + ((this->otavdd_en & 1) << 10)
 + ((this->otw_en & 1) << 9)
 + ((this->csarefuv_en & 1) << 5)
;
}

sysf_ctrl_register_t sysf_ctrl_register_t::decode(uint16_t data) {
    sysf_ctrl_register_t reg = {
        .otavdd_en = static_cast<uint8_t>((data >> 10) & 1),
        .otw_en = static_cast<uint8_t>((data >> 9) & 1),
        .csarefuv_en = static_cast<uint8_t>((data >> 5) & 1),

    };
    return reg;
}

bool sysf_ctrl_register_t::operator==(const sysf_ctrl_register_t& other) const {
    return true
        && (this->otavdd_en == other.otavdd_en)
        && (this->otw_en == other.otw_en)
        && (this->csarefuv_en == other.csarefuv_en)
    ;
}

void sysf_ctrl_register_t::print() const {
    Serial.print("sysf_ctrl:");

    Serial.print(" otavdd_en=");
    Serial.print(this->otavdd_en);
    Serial.print(" otw_en=");
    Serial.print(this->otw_en);
    Serial.print(" csarefuv_en=");
    Serial.print(this->csarefuv_en);

    Serial.println("");
}
uint16_t drvf_ctrl_register_t::encode() const {
    return 0 + ((this->ocp_deg & 3) << 4)
 + ((this->ocp_tblank & 3) << 2)
 + ((this->ocp_lvl & 1) << 0)
;
}

drvf_ctrl_register_t drvf_ctrl_register_t::decode(uint16_t data) {
    drvf_ctrl_register_t reg = {
        .ocp_deg = static_cast<uint8_t>((data >> 4) & 3),
        .ocp_tblank = static_cast<uint8_t>((data >> 2) & 3),
        .ocp_lvl = static_cast<uint8_t>((data >> 0) & 1),

    };
    return reg;
}

bool drvf_ctrl_register_t::operator==(const drvf_ctrl_register_t& other) const {
    return true
        && (this->ocp_deg == other.ocp_deg)
        && (this->ocp_tblank == other.ocp_tblank)
        && (this->ocp_lvl == other.ocp_lvl)
    ;
}

void drvf_ctrl_register_t::print() const {
    Serial.print("drvf_ctrl:");

    Serial.print(" ocp_deg=");
    Serial.print(this->ocp_deg);
    Serial.print(" ocp_tblank=");
    Serial.print(this->ocp_tblank);
    Serial.print(" ocp_lvl=");
    Serial.print(this->ocp_lvl);

    Serial.println("");
}
uint16_t flt_tctrl_register_t::encode() const {
    return 0 + ((this->slow_tretry & 3) << 2)
 + ((this->fast_tretry & 3) << 0)
;
}

flt_tctrl_register_t flt_tctrl_register_t::decode(uint16_t data) {
    flt_tctrl_register_t reg = {
        .slow_tretry = static_cast<uint8_t>((data >> 2) & 3),
        .fast_tretry = static_cast<uint8_t>((data >> 0) & 3),

    };
    return reg;
}

bool flt_tctrl_register_t::operator==(const flt_tctrl_register_t& other) const {
    return true
        && (this->slow_tretry == other.slow_tretry)
        && (this->fast_tretry == other.fast_tretry)
    ;
}

void flt_tctrl_register_t::print() const {
    Serial.print("flt_tctrl:");

    Serial.print(" slow_tretry=");
    Serial.print(this->slow_tretry);
    Serial.print(" fast_tretry=");
    Serial.print(this->fast_tretry);

    Serial.println("");
}
uint16_t flt_clr_register_t::encode() const {
    return 0 + ((this->flt_clr & 1) << 0)
;
}

flt_clr_register_t flt_clr_register_t::decode(uint16_t data) {
    flt_clr_register_t reg = {
        .flt_clr = static_cast<uint8_t>((data >> 0) & 1),

    };
    return reg;
}

bool flt_clr_register_t::operator==(const flt_clr_register_t& other) const {
    return true
        && (this->flt_clr == other.flt_clr)
    ;
}

void flt_clr_register_t::print() const {
    Serial.print("flt_clr:");

    Serial.print(" flt_clr=");
    Serial.print(this->flt_clr);

    Serial.println("");
}
uint16_t pwmg_period_register_t::encode() const {
    return 0 + ((this->pwm_prd_out & 4095) << 0)
;
}

pwmg_period_register_t pwmg_period_register_t::decode(uint16_t data) {
    pwmg_period_register_t reg = {
        .pwm_prd_out = static_cast<uint16_t>((data >> 0) & 4095),

    };
    return reg;
}

bool pwmg_period_register_t::operator==(const pwmg_period_register_t& other) const {
    return true
        && (this->pwm_prd_out == other.pwm_prd_out)
    ;
}

void pwmg_period_register_t::print() const {
    Serial.print("pwmg_period:");

    Serial.print(" pwm_prd_out=");
    Serial.print(this->pwm_prd_out);

    Serial.println("");
}
uint16_t pwmg_a_duty_register_t::encode() const {
    return 0 + ((this->pwm_duty_outa & 4095) << 0)
;
}

pwmg_a_duty_register_t pwmg_a_duty_register_t::decode(uint16_t data) {
    pwmg_a_duty_register_t reg = {
        .pwm_duty_outa = static_cast<uint16_t>((data >> 0) & 4095),

    };
    return reg;
}

bool pwmg_a_duty_register_t::operator==(const pwmg_a_duty_register_t& other) const {
    return true
        && (this->pwm_duty_outa == other.pwm_duty_outa)
    ;
}

void pwmg_a_duty_register_t::print() const {
    Serial.print("pwmg_a_duty:");

    Serial.print(" pwm_duty_outa=");
    Serial.print(this->pwm_duty_outa);

    Serial.println("");
}
uint16_t pwmg_b_duty_register_t::encode() const {
    return 0 + ((this->pwm_duty_outb & 4095) << 0)
;
}

pwmg_b_duty_register_t pwmg_b_duty_register_t::decode(uint16_t data) {
    pwmg_b_duty_register_t reg = {
        .pwm_duty_outb = static_cast<uint16_t>((data >> 0) & 4095),

    };
    return reg;
}

bool pwmg_b_duty_register_t::operator==(const pwmg_b_duty_register_t& other) const {
    return true
        && (this->pwm_duty_outb == other.pwm_duty_outb)
    ;
}

void pwmg_b_duty_register_t::print() const {
    Serial.print("pwmg_b_duty:");

    Serial.print(" pwm_duty_outb=");
    Serial.print(this->pwm_duty_outb);

    Serial.println("");
}
uint16_t pwmg_c_duty_register_t::encode() const {
    return 0 + ((this->pwm_duty_outc & 4095) << 0)
;
}

pwmg_c_duty_register_t pwmg_c_duty_register_t::decode(uint16_t data) {
    pwmg_c_duty_register_t reg = {
        .pwm_duty_outc = static_cast<uint16_t>((data >> 0) & 4095),

    };
    return reg;
}

bool pwmg_c_duty_register_t::operator==(const pwmg_c_duty_register_t& other) const {
    return true
        && (this->pwm_duty_outc == other.pwm_duty_outc)
    ;
}

void pwmg_c_duty_register_t::print() const {
    Serial.print("pwmg_c_duty:");

    Serial.print(" pwm_duty_outc=");
    Serial.print(this->pwm_duty_outc);

    Serial.println("");
}
uint16_t pwm_state_register_t::encode() const {
    return 0 + ((static_cast<std::underlying_type_t<pwmc_state_enum>>(this->pwmc_state) & 7) << 8)
 + ((static_cast<std::underlying_type_t<pwmb_state_enum>>(this->pwmb_state) & 7) << 4)
 + ((static_cast<std::underlying_type_t<pwma_state_enum>>(this->pwma_state) & 7) << 0)
;
}

pwm_state_register_t pwm_state_register_t::decode(uint16_t data) {
    pwm_state_register_t reg = {
        .pwmc_state = static_cast<pwmc_state_enum>((data >> 8) & 7),
        .pwmb_state = static_cast<pwmb_state_enum>((data >> 4) & 7),
        .pwma_state = static_cast<pwma_state_enum>((data >> 0) & 7),

    };
    return reg;
}

bool pwm_state_register_t::operator==(const pwm_state_register_t& other) const {
    return true
        && (this->pwmc_state == other.pwmc_state)
        && (this->pwmb_state == other.pwmb_state)
        && (this->pwma_state == other.pwma_state)
    ;
}

void pwm_state_register_t::print() const {
    Serial.print("pwm_state:");

    Serial.print(" pwmc_state=");
    Serial.print(static_cast<std::underlying_type_t<pwmc_state_enum>>(this->pwmc_state));
    Serial.print(" pwmb_state=");
    Serial.print(static_cast<std::underlying_type_t<pwmb_state_enum>>(this->pwmb_state));
    Serial.print(" pwma_state=");
    Serial.print(static_cast<std::underlying_type_t<pwma_state_enum>>(this->pwma_state));

    Serial.println("");
}
uint16_t pwmg_ctrl_register_t::encode() const {
    return 0 + ((this->pwm_en & 1) << 10)
 + ((static_cast<std::underlying_type_t<pwmcntr_mode_enum>>(this->pwmcntr_mode) & 3) << 8)
 + ((this->pwm_osc_sync & 7) << 5)
 + ((static_cast<std::underlying_type_t<spiclk_freq_sync_enum>>(this->spiclk_freq_sync) & 7) << 2)
 + ((static_cast<std::underlying_type_t<spisync_acrcy_enum>>(this->spisync_acrcy) & 3) << 0)
;
}

pwmg_ctrl_register_t pwmg_ctrl_register_t::decode(uint16_t data) {
    pwmg_ctrl_register_t reg = {
        .pwm_en = static_cast<uint8_t>((data >> 10) & 1),
        .pwmcntr_mode = static_cast<pwmcntr_mode_enum>((data >> 8) & 3),
        .pwm_osc_sync = static_cast<uint8_t>((data >> 5) & 7),
        .spiclk_freq_sync = static_cast<spiclk_freq_sync_enum>((data >> 2) & 7),
        .spisync_acrcy = static_cast<spisync_acrcy_enum>((data >> 0) & 3),

    };
    return reg;
}

bool pwmg_ctrl_register_t::operator==(const pwmg_ctrl_register_t& other) const {
    return true
        && (this->pwm_en == other.pwm_en)
        && (this->pwmcntr_mode == other.pwmcntr_mode)
        && (this->pwm_osc_sync == other.pwm_osc_sync)
        && (this->spiclk_freq_sync == other.spiclk_freq_sync)
        && (this->spisync_acrcy == other.spisync_acrcy)
    ;
}

void pwmg_ctrl_register_t::print() const {
    Serial.print("pwmg_ctrl:");

    Serial.print(" pwm_en=");
    Serial.print(this->pwm_en);
    Serial.print(" pwmcntr_mode=");
    Serial.print(static_cast<std::underlying_type_t<pwmcntr_mode_enum>>(this->pwmcntr_mode));
    Serial.print(" pwm_osc_sync=");
    Serial.print(this->pwm_osc_sync);
    Serial.print(" spiclk_freq_sync=");
    Serial.print(static_cast<std::underlying_type_t<spiclk_freq_sync_enum>>(this->spiclk_freq_sync));
    Serial.print(" spisync_acrcy=");
    Serial.print(static_cast<std::underlying_type_t<spisync_acrcy_enum>>(this->spisync_acrcy));

    Serial.println("");
}
uint16_t pwm_ctrl1_register_t::encode() const {
    return 0 + ((this->ssc_dis & 1) << 2)
 + ((static_cast<std::underlying_type_t<pwm_mode_enum>>(this->pwm_mode) & 3) << 0)
;
}

pwm_ctrl1_register_t pwm_ctrl1_register_t::decode(uint16_t data) {
    pwm_ctrl1_register_t reg = {
        .ssc_dis = static_cast<uint8_t>((data >> 2) & 1),
        .pwm_mode = static_cast<pwm_mode_enum>((data >> 0) & 3),

    };
    return reg;
}

bool pwm_ctrl1_register_t::operator==(const pwm_ctrl1_register_t& other) const {
    return true
        && (this->ssc_dis == other.ssc_dis)
        && (this->pwm_mode == other.pwm_mode)
    ;
}

void pwm_ctrl1_register_t::print() const {
    Serial.print("pwm_ctrl1:");

    Serial.print(" ssc_dis=");
    Serial.print(this->ssc_dis);
    Serial.print(" pwm_mode=");
    Serial.print(static_cast<std::underlying_type_t<pwm_mode_enum>>(this->pwm_mode));

    Serial.println("");
}
uint16_t drv_ctrl_register_t::encode() const {
    return 0 + ((this->dlycmp_en & 1) << 7)
 + ((static_cast<std::underlying_type_t<tdead_ctrl_enum>>(this->tdead_ctrl) & 7) << 4)
 + ((static_cast<std::underlying_type_t<slew_rate_enum>>(this->slew_rate) & 3) << 0)
;
}

drv_ctrl_register_t drv_ctrl_register_t::decode(uint16_t data) {
    drv_ctrl_register_t reg = {
        .dlycmp_en = static_cast<uint8_t>((data >> 7) & 1),
        .tdead_ctrl = static_cast<tdead_ctrl_enum>((data >> 4) & 7),
        .slew_rate = static_cast<slew_rate_enum>((data >> 0) & 3),

    };
    return reg;
}

bool drv_ctrl_register_t::operator==(const drv_ctrl_register_t& other) const {
    return true
        && (this->dlycmp_en == other.dlycmp_en)
        && (this->tdead_ctrl == other.tdead_ctrl)
        && (this->slew_rate == other.slew_rate)
    ;
}

void drv_ctrl_register_t::print() const {
    Serial.print("drv_ctrl:");

    Serial.print(" dlycmp_en=");
    Serial.print(this->dlycmp_en);
    Serial.print(" tdead_ctrl=");
    Serial.print(static_cast<std::underlying_type_t<tdead_ctrl_enum>>(this->tdead_ctrl));
    Serial.print(" slew_rate=");
    Serial.print(static_cast<std::underlying_type_t<slew_rate_enum>>(this->slew_rate));

    Serial.println("");
}
uint16_t csa_ctrl_register_t::encode() const {
    return 0 + ((this->csa_en & 1) << 3)
 + ((static_cast<std::underlying_type_t<csa_gain_enum>>(this->csa_gain) & 3) << 0)
;
}

csa_ctrl_register_t csa_ctrl_register_t::decode(uint16_t data) {
    csa_ctrl_register_t reg = {
        .csa_en = static_cast<uint8_t>((data >> 3) & 1),
        .csa_gain = static_cast<csa_gain_enum>((data >> 0) & 3),

    };
    return reg;
}

bool csa_ctrl_register_t::operator==(const csa_ctrl_register_t& other) const {
    return true
        && (this->csa_en == other.csa_en)
        && (this->csa_gain == other.csa_gain)
    ;
}

void csa_ctrl_register_t::print() const {
    Serial.print("csa_ctrl:");

    Serial.print(" csa_en=");
    Serial.print(this->csa_en);
    Serial.print(" csa_gain=");
    Serial.print(static_cast<std::underlying_type_t<csa_gain_enum>>(this->csa_gain));

    Serial.println("");
}
uint16_t sys_ctrl_register_t::encode() const {
    return 0 + ((this->write_key & 7) << 12)
 + ((this->reg_lock & 1) << 7)
 + ((this->spi_pen & 1) << 6)
;
}

sys_ctrl_register_t sys_ctrl_register_t::decode(uint16_t data) {
    sys_ctrl_register_t reg = {
        .write_key = static_cast<uint8_t>((data >> 12) & 7),
        .reg_lock = static_cast<uint8_t>((data >> 7) & 1),
        .spi_pen = static_cast<uint8_t>((data >> 6) & 1),

    };
    return reg;
}

bool sys_ctrl_register_t::operator==(const sys_ctrl_register_t& other) const {
    return true
        && (this->write_key == other.write_key)
        && (this->reg_lock == other.reg_lock)
        && (this->spi_pen == other.spi_pen)
    ;
}

void sys_ctrl_register_t::print() const {
    Serial.print("sys_ctrl:");

    Serial.print(" write_key=");
    Serial.print(this->write_key);
    Serial.print(" reg_lock=");
    Serial.print(this->reg_lock);
    Serial.print(" spi_pen=");
    Serial.print(this->spi_pen);

    Serial.println("");
}
